(load "evaluator.scm")


;;Starter evaluatoren og REPLET 
(set! the-global-environment (setup-environment))
(mc-eval '(+ 1 2) the-global-environment)
(read-eval-print-loop)




;;Oppgave 1 a)

;(define (foo cond else)
 ; (cond ((= cond 2) 0)
 ;       (else (else cond))))


;(define cond 3)

;(define (else x) (/ x 2))

;;(define (square x) (* x x))

;(foo 2 square)


;(foo 4 square)

;(cond ((= cond 2) 0)
      ;;(else (else 4)))

;; Evaluatoren skiller mellom else/cond, som en prosedyre, og else/cond, som en variabel, avhengig av hvor mange argumenter den tar inn
;; Det er også viktig å skille mellom hvilke omstendighet den er validert i. Slik som cond er definert som en global variabel 3,
;; men den er også en lokal variabel i foo hvor den tilsvarer et argument. Det samme gjelder else. Special-formen til cond har også egne
;; syntaktiske krav som må oppfylles 


;; (foo 2 square):

;; Her sender vi med 2 og prosedyren square som argumenter. Når vi kaller cond med et else uttrykk klarer evaluatoren å skille mellom et
;; kondisjonalt uttrykk og argumentet cond. Det samme gjelder for else

;; (foo 4 square):

;; Programmet vil gjøre det samme som ovenfor, men denne gangen vil den gå inn i else og kalle prosedyreargumentet på cond-argumentet


;; (cond ((= cond 2) 0) (else (else 4))):

;; Her oppfyller cond det syntaktiske kravet til et kondisjonalt uttrykk, men argumentet cond henter den fra den globale omgivelsen ettersom
;; det er der den ble kalt. Else har også blitt kalt fra den globale-omgivelsen som vil da tilsvare define uttrykket for else 




;; else som conditional
;; else som argument
;; else som prosedyre
;; 



;;Oppgave 2


;; a)


;; Legger til 1 på argumentet 

;(define (1+ x)
 ; (+ x 1))


;; Trekker fra 1 på argumentet

;(define (1- x)
 ; (- x 1))



;; Her er koden som vi implementerte i kildekoden til evaluatoren 


;; b)

(define (install-primitive! proc body)
  (set-car! (car the-global-environment)
            (append (caar the-global-environment) (list proc)))
  (set-cdr! (car the-global-environment)
            (append (cdar the-global-environment) (list (list 'primitive body)))))


(install-primitive! 'square (lambda (x) (* x x)))

(read-eval-print-loop)

;; Oppgave 3


;; a)




