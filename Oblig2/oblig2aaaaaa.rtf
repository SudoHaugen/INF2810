{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 ; Oppgave 1\
\
; a)\
\
(define (p-cons x y)\
  (lambda (proc)\
    (proc x y)))\
\
(define (p-car p)\
  (p (lambda (x y)\
       x)))\
\
(define (p-cdr p)\
  (p (lambda (x y)\
       y)))\
\
; b)\
\
(define foo 42)\
\
(let ((foo 5)\
      (x foo))\
  (if (= x foo)\
      'same\
      'different))\
\
((lambda (foo x)\
   (if (= x foo)\
       'same\
       'different))\
 5 foo)\
\
\
\
(let ((bar foo)\
      (baz 'towel))\
  (let ((bar (list bar baz))\
        (foo baz))\
    (list foo bar)))\
\
((lambda (bar baz)\
   ((lambda (bar foo)\
      (list foo bar))\
    (list bar baz) baz))\
 foo 'towel)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
(define (grow-huffman-tree input)\
  (define (grow-huffman-tree-1 reverse-input)\
    (if (null? (cddr reverse-input))\
        (make-code-tree (car reverse-input) (cadr reverse-input))\
        (make-code-tree (car reverse-input)\
                        (grow-huffman-tree-1 (cdr reverse-input)))))\
  (grow-huffman-tree-1 (reverse (make-leaf-set input))))\
\
\
\
\
\
; f)\
\
\
(define freqs-2 '((samurais 57)\
                  (ninjas 20)\
                  (fight 45)\
                  (night 12)\
                  (hide 3)\
                  (in 2)\
                  (ambush 2)\
                  (defeat 1)\
                  (the 5)\
                  (sword 4)\
                  (by 12)\
                  (assassin 1)\
                  (river 2)\
                  (forest 1)\
                  (wait 1)\
                  (poison 1)))\
\
(define temp-list '(ninjas fight ninjas fight ninjas ninjas fight samurais samurais fight samurais fight ninjas ninjas fight by night))\
\
\
(define codebook2 (grow-huffman-tree freqs-2))\
\
; 1.\
\
; Laget en metode for \'e5 hjelpe oss \'e5 telle antall bits\
\
(define (list-counter x)\
  (if (null? x)\
      0\
      (+ 1 (list-counter (cdr x)))))\
\
      \
(decode (encode freqs-2 codebook2) codebook2)\
\
\
;(list-counter (encode temp-list codebook2)) -> 42.\
; Det er alts\'e5 42 bits som brukes for \'e5 kode meldingen\
\
\
\
\
; 2.\
\
(/ (list-counter (encode temp-list codebook2)) 17)\
\
; 42 / 17 = 2,47\
; Den gjennomsnittelige lengden er p\'e5 2,47 (ettersom det er 17 elementer i listen)\
\
\
; 3.\
\
; 4*17 = 68 bits\
\
\
\
\
\
\
\
(define (huffman-leaves tree)\
  (define (leaf-helper branch)\
      (if (leaf? branch)\
          (list (symbol-leaf branch) (weight-leaf branch))\
          (list (leaf-helper (left-branch branch))\
                (leaf-helper (right-branch branch)))))\
  (leaf-helper tree))}